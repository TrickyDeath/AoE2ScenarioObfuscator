# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'encoder/easyencoder.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import datetime
import os
import sys
import traceback

from PyQt5 import QtCore, QtWidgets

from encoder import *
from raw_ui.easyencoder import Ui_MainWindow


class WorkerResult:
    SUCCESS = 0
    ERROR = 1

    def __init__(self, code, detail):
        self.code = code
        self.detail = detail


class ConfoundWorker(QtCore.QThread):
    result = QtCore.pyqtSignal(WorkerResult)

    def __init__(self, source_file, output_file, confound_count, author, index, value, parent=None):
        super().__init__(parent)
        self.source_file = source_file
        self.output_file = output_file
        self.confound_count = confound_count
        self.author = author
        self.index = index
        self.value = value

    def start_confound(self, source_file, output_file, confound_count, author, index, value):
        scenario = open_scenario(source_file)
        comfound_triggers(scenario, confound_count, author, index, value)
        save_scenario(scenario, output_file)

    def run(self):
        try:
            self.start_confound(
                self.source_file,
                self.output_file,
                self.confound_count,
                self.author,
                self.index,
                self.value)
        except BaseException as e:
            result = WorkerResult(WorkerResult.ERROR, traceback.format_exc())
            self.result.emit(result)
        else:
            result = WorkerResult(WorkerResult.SUCCESS, self.output_file)
            self.result.emit(result)


class Signal(QtCore.QObject):
    text_update = QtCore.pyqtSignal(str)

    def write(self, text):
        self.text_update.emit(str(text))
        QtWidgets.QApplication.processEvents()


class UIMainWindow(Ui_MainWindow):
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)

        # 初始值
        self.source_file = None
        self.output_file = None
        self.ConfoundedTriggersCount.setText("1000")
        self.AuthorName.setText("无名氏")
        self.widget_9.setEnabled(False)
        self.CustomFilename.setEnabled(False)

        # 绑定事件
        self.SourceFilePathButton.clicked.connect(self.getSourceFile)
        self.OutputFilePathButton.clicked.connect(self.getOutputFile)
        self.Start.clicked.connect(self.startThreading)
        self.NameType.currentIndexChanged.connect(self.changeNameType)
        self.IsCustomFilename.stateChanged.connect(self.changeCustomFilenameType)

        # 实时显示输出, 将控制台的输出重定向到界面中
        sys.stdout = Signal()
        sys.stdout.text_update.connect(self.updateText)

    def changeCustomFilenameType(self):
        status = self.IsCustomFilename.isChecked()
        self.CustomFilename.setEnabled(status)

    def changeNameType(self):
        index = self.NameType.currentIndex()
        if index == 0:
            self.widget_9.setEnabled(False)
        elif index == 1:
            self.widget_9.setEnabled(True)

    def getSourceFile(self):
        dialog = QtWidgets.QFileDialog()
        dialog.setNameFilter("场景文件(*.aoe2scenario)")
        if dialog.exec():
            norm_filename = os.path.normpath(dialog.selectedFiles()[0])
            self.SourceFilePath.setText(norm_filename)
            self.source_file = norm_filename

    def getOutputFile(self):
        dialog = QtWidgets.QFileDialog()
        dialog.setFileMode(QtWidgets.QFileDialog.FileMode.DirectoryOnly)
        if dialog.exec():
            norm_filename = os.path.normpath(dialog.selectedFiles()[0])
            self.OutputFilePath.setText(norm_filename)
            self.output_file = norm_filename

    def updateText(self, text):
        if text and text != '\n':
            self.PrintBar.append(text)
        self.PrintBar.ensureCursorVisible()

    # 启动新线程供以ASP工作
    def startThreading(self):
        # with redirect_stdout(f_io):
        if self.source_file is None or self.output_file is None or self.ConfoundedTriggersCount.text(
        ) is None or self.ConfoundedTriggersCount.text() is None:
            print("你好像漏了什么参数！")
        else:
            print("开始混淆" + self.source_file)
            self.Start.setDisabled(True)
            try:
                confound_count = int(self.ConfoundedTriggersCount.text())
            except BaseException:
                print("用于混淆的空触发器个数输入错误，已自动重置为1000进行处理", end="")
                confound_count = 1000

            file_full_name = os.path.basename(self.source_file)
            prefix, postfix = os.path.splitext(file_full_name)
            if self.IsCustomFilename.isChecked():
                output_filename = os.path.join(self.output_file, self.CustomFilename.text() + postfix)
                if os.path.exists(output_filename):
                    current_time_str = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
                    output_filename = os.path.join(self.output_file,
                                                   self.CustomFilename.text() + "_" + current_time_str + postfix)
            else:
                current_time_str = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
                output_filename = os.path.join(self.output_file, prefix + "_" + current_time_str + postfix)

            author = str(self.AuthorName.text())
            index = self.NameType.currentIndex()
            value = self.NameValue.text()
            self.worker = ConfoundWorker(self.source_file, output_filename, confound_count, author, index, value)
            self.worker.start()
            self.worker.result.connect(self.endThreading)

    def endThreading(self, result):
        if result.code == WorkerResult.SUCCESS:
            print("触发混淆成功，文件已输出到" + result.detail)
        elif result.code == WorkerResult.ERROR:
            print("执行时遇到错误：\n" + result.detail)
        self.Start.setDisabled(False)

    def setStatement(self, version, update_time):
        self.StatementLabel.setText(
            "AoE2ScenarioObfuscator v%s by trickydeath. Last update time: %s" %
            (version, update_time))


# UI测试用
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QMainWindow()
    ui = UIMainWindow()
    ui.setupUi(main_window)
    main_window.show()
    app.exec_()
